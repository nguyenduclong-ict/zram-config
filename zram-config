#!/usr/bin/env bash
# shellcheck disable=SC2140,SC2210
set -x

TMPDIR="/tmp"

createZdevice() {
	if ! [[ -d "/sys/class/zram-control" ]]; then
		modprobe --verbose zram >> "$ZLOG" 2>&1 || return 1
	fi

	RAM_DEV="$(zramctl --find | tr -dc '0-9')"

	if [[ -z $RAM_DEV ]]; then
		echo "Failed to find an open zram device, trying one more time!"
		RAM_DEV="$(zramctl --find | tr -dc '0-9')"
		if [[ -z $RAM_DEV ]]; then
			echo "Still failed to find an open zram device, stopping creation!"
			return 1
		fi
	fi

	zramctl --size "$DISK_SIZE" --algorithm "$ALG" "/dev/zram${RAM_DEV}"

	if [[ -n $MEM_SIZE ]]; then
		echo "$MEM_SIZE" > "/sys/block/zram${RAM_DEV}/mem_limit"
	else
		echo "zram${RAM_DEV} no mem_limit" >> "$ZLOG"
	fi

	echo "zram${RAM_DEV} created comp_algorithm=${ALG} mem_limit=${MEM_SIZE} disksize=${DISK_SIZE}" >> "$ZLOG"
}

createZswap() {
	createZdevice || return 1
	mkswap --label "zram-config${RAM_DEV}" "/dev/zram${RAM_DEV}" >> "$ZLOG" 2>&1 || return 1

	if [[ -n $PRIORITY ]]; then
		swapon -v -p "$PRIORITY" "/dev/zram${RAM_DEV}" >> "$ZLOG" 2>&1 || return 1
	else
		echo "zram${RAM_DEV} no swap_priority" >> "$ZLOG"
		return 1
	fi

	if [[ -n $PAGE_CLUSTER ]]; then
		sysctl vm.page-cluster="$PAGE_CLUSTER" >> "$ZLOG" 2>&1 || return 1
	else
		echo "zram${RAM_DEV} no page_cluster" >> "$ZLOG"
	fi

	if [[ -n $SWAPPINESS ]]; then
		sysctl vm.swappiness="$SWAPPINESS" >> "$ZLOG" 2>&1 || return 1
	else
		echo "zram${RAM_DEV} no swappiness" >> "$ZLOG"
	fi

	echo "swap		/zram${RAM_DEV}		zram-config${RAM_DEV}" >> "${TMPDIR}"/zram-device-list
}

createZdir() {
	local dirPerm
	local dirUser
	local dirGroup
	local dirMountOpt
	local dirFSType

	if [[ -n $BIND_DIR ]]; then
		mkdir -p "${ZDIR}${BIND_DIR}" >> "$ZLOG" 2>&1 || return 1

		if [[ -n $TARGET_DIR ]]; then
			dirPerm="$(stat -c "%a" "$TARGET_DIR")"
			dirUser="$(stat -c "%u" "$TARGET_DIR")"
			dirGroup="$(stat -c "%g" "$TARGET_DIR")"

			echo "dirPerm ${TARGET_DIR} ${dirPerm} ${dirUser}:${dirGroup}" >> "$ZLOG"

			mount --verbose --bind "${TARGET_DIR}/" "${ZDIR}${BIND_DIR}/" >> "$ZLOG" 2>&1 || return 1
			mount --verbose --make-private "${ZDIR}${BIND_DIR}/" >> "$ZLOG" 2>&1 || return 1

			dirMountOpt="$(awk -v a="${ZDIR}${BIND_DIR}" '$2 == a {print $4}' /proc/mounts | head -1)"
			dirFSType="$(awk -v a="${ZDIR}${BIND_DIR}" '$2 == a {print $3}' /proc/mounts | head -1)"

			echo "dirMountOpt: ${dirMountOpt}; dirFsType: ${dirFSType}" >> "$ZLOG"
			createZdevice || return 1

			mke2fs -v -t "$dirFSType" "/dev/zram${RAM_DEV}" >> "$ZLOG" 2>&1 || return 1
			mkdir -p "${ZDIR}/zram${RAM_DEV}" >> "$ZLOG" 2>&1 || return 1
			mount --verbose --types "$dirFSType" -o "$dirMountOpt" "/dev/zram${RAM_DEV}" "${ZDIR}/zram${RAM_DEV}/" >> "$ZLOG" 2>&1 || return 1
			mkdir -p "${ZDIR}/zram${RAM_DEV}/upper" "${ZDIR}/zram${RAM_DEV}/workdir" "$TARGET_DIR" >> "$ZLOG" 2>&1 || return 1
			mount --verbose --types overlay -o redirect_dir=on,lowerdir="${ZDIR}${BIND_DIR}",upperdir="${ZDIR}/zram${RAM_DEV}/upper",workdir="${ZDIR}/zram${RAM_DEV}/workdir" "overlay${RAM_DEV}" "$TARGET_DIR" >> "$ZLOG" 2>&1 || return 1

			chown "${dirUser}:${dirGroup}" "${ZDIR}/zram${RAM_DEV}/upper" "${ZDIR}/zram${RAM_DEV}/workdir" "$TARGET_DIR" >> "$ZLOG" 2>&1 || return 1
			chmod "$dirPerm" "${ZDIR}/zram${RAM_DEV}/upper" "${ZDIR}/zram${RAM_DEV}/workdir" "$TARGET_DIR" >> "$ZLOG" 2>&1 || return 1

			echo "${ZTYPE}		/zram${RAM_DEV}		${TARGET_DIR}		${BIND_DIR}" >> "${TMPDIR}"/zram-device-list
		else
			echo "No mount directory provided in ztab" >> "$ZLOG"
			return 1
		fi
	else
		echo "No bind directory provided in ztab" >> "$ZLOG"
		return 1
	fi

	if [[ $ZTYPE == "log" ]] && [[ -n $OLDLOG_DIR ]]; then
		echo -e "olddir ${OLDLOG_DIR}\\ncreateolddir 755 root root\\nrenamecopy" > /etc/logrotate.d/00_oldlog
	else
		echo "createZlog: no oldlog directory provided in ztab" >> "$ZLOG"
	fi
}

mergeOverlay() {
	echo "overlay merge --lowerdir=${ZDIR}${BIND_DIR} --upperdir=${ZDIR}${ZRAM_DEV}/upper" >> "$ZLOG"
	ls -la "$ZDIR" "${ZDIR}${BIND_DIR}" "${ZDIR}${ZRAM_DEV}/upper" >> "$ZLOG"
	cd /usr/local/lib/zram-config/ || return 1
	(yes | ./overlay merge --lowerdir="${ZDIR}${BIND_DIR}" --upperdir="${ZDIR}${ZRAM_DEV}/upper") >> "$ZLOG" 2>&1 || return 1
	bash -x -- *.sh >> "$ZLOG" 2>&1 || return 1
	rm -fv -- *.sh >> "$ZLOG" 2>&1 || return 1
}

removeZdir() {
	if [[ -n $OLDLOG_DIR ]]; then
		rm -f /etc/logrotate.d/00_oldlog
	fi

	echo "$ZRAM_DEV" >> "$ZLOG"

	if [[ -n $TARGET_DIR ]]; then
		if ! (umount --verbose "${TARGET_DIR}/" >> "$ZLOG" 2>&1); then
			umount --verbose --lazy "${TARGET_DIR}/" >> "$ZLOG" 2>&1 || return 1
		fi
	else
		return 1
	fi

	mergeOverlay >> "$ZLOG" 2>&1 || return 1

	if [[ -n $ZRAM_DEV ]]; then
		if ! (umount --verbose "${ZDIR}${ZRAM_DEV}/" >> "$ZLOG" 2>&1); then
			umount --verbose --lazy "${ZDIR}${ZRAM_DEV}/" >> "$ZLOG" 2>&1 || return 1
		fi
		rm -rfv "${ZDIR}${ZRAM_DEV}" >> "$ZLOG" 2>&1 || return 1
	else
		return 1
	fi

	if [[ -n $BIND_DIR ]]; then
		if ! (umount --verbose "${ZDIR}${BIND_DIR}/" >> "$ZLOG" 2>&1); then
			umount --verbose --lazy "${ZDIR}${BIND_DIR}/" >> "$ZLOG" 2>&1 || return 1
		fi
		rm -rfv "${ZDIR}${BIND_DIR}" >> "$ZLOG" 2>&1 || return 1
	else
		return 1
	fi

	zramctl -r "/dev${ZRAM_DEV}" >> "$ZLOG" 2>&1 || return 1

	echo "/dev$ZRAM_DEV removed" >> "$ZLOG"
}

removeZswap() {
	swapoff "/dev${ZRAM_DEV}" >> "$ZLOG" 2>&1 || return 1

	zramctl -r "/dev${ZRAM_DEV}" >> "$ZLOG" 2>&1 || return 1

	echo "/dev$ZRAM_DEV removed" >> "$ZLOG"
}

serviceConfiguration() {
	if [[ $1 == "stop" ]]; then
		echo "Stopping services that interfere with zram device configuration" >> "$ZLOG"
		if dpkg -s 'nginx' &> /dev/null && [[ $(systemctl is-active nginx.service) == "active" ]]; then
			export nginxActive="true"
			systemctl stop nginx.service >> "$ZLOG" 2>&1 || return 1
		fi
		if dpkg -s 'samba' &> /dev/null && [[ $(systemctl is-active smbd.service) == "active" ]]; then
			export sambaActive="true"
			systemctl stop smbd.service nmbd.service >> "$ZLOG" 2>&1 || return 1
		fi
		if dpkg -s 'openhab' &> /dev/null && [[ $(systemctl is-active openhab.service) == "active" ]]; then
			export openhabActive="true"
			systemctl stop openhab.service >> "$ZLOG" 2>&1 || return 1
		fi
		if [[ $(systemctl is-active rsyslog.service) == "active" ]]; then
			export rsyslogActive="true"
			systemctl stop syslog.socket >> "$ZLOG" 2>&1 || return 1
		fi
		if [[ $(systemctl is-active systemd-journald.service) == "active" ]]; then
			export journaldActive="true"
			journalctl --flush >> "$ZLOG" 2>&1 || return 1
			systemctl stop systemd-journald.socket systemd-journald-audit.socket systemd-journald-dev-log.socket >> "$ZLOG" 2>&1 || return 1
		fi
	elif [[ $1 == "start" ]]; then
		echo "Restarting services that interfere with zram device configuration" >> "$ZLOG"
		if [[ -n $journaldActive ]]; then
			systemctl restart systemd-journald.socket systemd-journald-audit.socket systemd-journald-dev-log.socket >> "$ZLOG" 2>&1 || return 1
		fi
		if [[ -n $rsyslogActive ]]; then
			systemctl restart syslog.socket >> "$ZLOG" 2>&1 || return 1
		fi
		if [[ -n $openhabActive ]]; then
			systemctl restart openhab.service >> "$ZLOG" 2>&1 || return 1
		fi
		if [[ -n $sambaActive ]]; then
			systemctl restart smbd.service nmbd.service >> "$ZLOG" 2>&1 || return 1
		fi
		if [[ -n $nginxActive ]]; then
			systemctl restart nginx.service >> "$ZLOG" 2>&1 || return 1
		fi
	fi
}

ZSHARE="/usr/local/share/zram-config"
ZLOG="${ZSHARE}/log/zram-config.log"
ZDIR="/opt/zram"
if [[ $2 == "shutdown" ]]; then
  SERVICE="1"
fi

case "$1" in
	start)
		echo "zram-config start $(date +%Y-%m-%d-%H:%M:%S)" >> "$ZLOG"
		rm -fv "${TMPDIR}"/zram-device-list.new >> "$ZLOG"
		file="/etc/ztab"
		ZTAB_EMPTY="true"
		while read -r line; do
			case "$line" in
				"#"*)
					# Skip comment line
					continue
					;;

				"")
					# Skip empty line
					continue
					;;

				*)
					# shellcheck disable=SC2086
					set -- $line
					echo "ztab create ${1} ${2} ${3} ${4} ${5} ${6} ${7} ${8} ${9}" >> "$ZLOG"
					ZTAB_EMPTY="false"
					ZTYPE="$1"
					ALG="$2"
					MEM_SIZE="$3"
					DISK_SIZE="$4"
					if [[ -f "${TMPDIR}"/zram-device-list ]]; then
						if [[ $1 == "swap" ]]; then
							entry="$(grep "^swap" "${TMPDIR}"/zram-device-list)"
						else
							entry="$(grep "${1}.*${5}" "${TMPDIR}"/zram-device-list)"
						fi
						if [[ -n $entry ]]; then
							echo "entry ${entry} already exists as zram."
							echo "$entry" >> "${TMPDIR}"/zram-device-list.new
							continue
						fi
					fi
					test -f "${TMPDIR}"/zram-device-list.new && mv "${TMPDIR}"/zram-device-list.new "${TMPDIR}"/zram-device-list

					case "$1" in
						swap)
							PRIORITY="$5"
							PAGE_CLUSTER="$6"
							SWAPPINESS="$7"
							createZswap
							;;

						dir)
							TARGET_DIR="$5"
							BIND_DIR="$6"
							serviceConfiguration "stop"
							createZdir
							;;

						log)
							TARGET_DIR="$5"
							BIND_DIR="$6"
							OLDLOG_DIR="$7"
							serviceConfiguration "stop"
							createZdir
							;;
					esac
					;;
			esac
		done < "$file"
		if [[ $ZTAB_EMPTY == "true" ]]; then
			echo "'/etc/ztab' is empty and needs to be configured" >> "$ZLOG"
			exit 1
		fi
		;;

	stop)
		if [[ $(systemctl is-active zram-config.service) == "active" ]]; then
			systemctl stop zram-config.service & systemctl kill zram-config.service >> "$ZLOG" 2>&1 || return 1
		fi
		echo "zram-config stop $(date +%Y-%m-%d-%H:%M:%S)" >> "$ZLOG"
		tac "${TMPDIR}"/zram-device-list > "${TMPDIR}"/zram-device-list.rev
		file="${TMPDIR}/zram-device-list.rev"
		while read -r line; do
			case "$line" in
				"#"*)
					# Skip comment line
					continue
					;;

				"")
					# Skip empty line
					continue
					;;

				*)
					# shellcheck disable=SC2086
					set -- $line
					echo "ztab remove ${1} ${2} ${3} ${4}" >> "$ZLOG"
					case "$1" in
						swap)
							ZRAM_DEV="$2"
							removeZswap
							;;

						dir)
							ZRAM_DEV="$2"
							TARGET_DIR="$3"
							BIND_DIR="$4"
							if [[ -z $SERVICE ]]; then
								serviceConfiguration "stop"
							fi
							removeZdir
							;;

						log)
							ZRAM_DEV="$2"
							TARGET_DIR="$3"
							BIND_DIR="$4"
							if [[ -z $SERVICE ]]; then
								serviceConfiguration "stop"
							fi
							removeZdir
							;;
					esac
					;;
			esac
		done < "$file"
		rm -fv "${TMPDIR}"/zram-device-list.rev "${TMPDIR}"/zram-device-list >> "$ZLOG"
		;;

	*)
		echo "Usage: zram-config {start|stop}" > 2
		exit 1
		;;
esac
if [[ -z $SERVICE ]]; then
	serviceConfiguration "start"
fi
